<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Zend Guard Run-time support missing!]]></title>
    <url>%2F2017%2F09%2F20%2FZend%E5%8A%A0%E5%AF%86%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言Zend Guard Run-time support missing! Zend Guard运行时支持的缺失！ 下载相关版本的Zend Guard官网 下载好后解压压缩包，找到目录下的 ZendLoader.dll 文件，将它放到你的php目录下ext下，再编辑php.ini文件，添加一段代码（如）：123456[Zend.loader]zend_loader.enable=1zend_loader.disable_licensing=1zend_loader.obfuscation_level_support=3zend_loader.license_path=zend_extension="你的PHP安装目录\ext\ZendLoader.dll" 注意事项12zend guard loader只支持NTS的版本，意味着如果你的php版本是TS的话，就没法使用zend guard loader了，如果你想查看自己的php是ts还是nts的，只需要输出phpinfo，然后搜索下：Thread Safety，disabled对应nts版本，否则为ts。因此，终极解决办法就是，下载个php NTS版本进行安装即可。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更改Ubuntu默认python版本的两种方法]]></title>
    <url>%2F2017%2F07%2F25%2F%E6%9B%B4%E6%94%B9Ubuntu%E9%BB%98%E8%AE%A4python%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[使用 ls 命令来查看系统中都有那些 Python 的二进制文件可供使用1'ls /usr/bin/python*' 查看默认的 Python 版本信息1'python --version' 在系统级修改 Python 版本 使用 update-alternatives 来为整个系统更改 Python 版本。以 root 身份登录，首先罗列出所有可用的 python 替代版本信息1'update-alternatives --list python' 将 python2.7 和 python3.5 放入其中123'update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1''update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2'#【--install 选项使用了多个参数用于创建符号链接。最后一个参数指定了此选项的优先级，如果我们没有手动来设置替代选项，那么具有最高优先级的选项就会被选中】 列出可用的 Python 替代版本1'update-alternatives --list python' 使用下方的命令随时在列出的 Python 替代版本中任意切换1'update-alternatives --config python' 移除替代版本1'update-alternatives --remove python /usr/bin/python2.7']]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git学习笔记]]></title>
    <url>%2F2017%2F07%2F21%2Fgit%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[在Liunx上安装GitUbuntu安装:1sudo apt-get install git Centos安装:1sudo yum install git 在Windows上安装Git前往git Download下载 安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，在命令行输入: 12$ git config --global user.name "your name"$ git config --global user.email "email@example.com" Git 常用命令速查表 步骤创建版本库123$ mkdir sugar$ cd sugar$ pwd(用于显示当前目录) 通过git init 命令把目录变成Git可以管理的仓库1$ git init 把文件添加到版本库编写文件(vi readme.txt)1234567 Git is a version control system. Git is free software.```bash#### 用命令git add &lt;file&gt;将文件添加到仓库```bash git add readme.txt 注：git add &lt;file&gt; &lt;file&gt;可反复多次使用，添加多个文件 用命令git commit 将文件提交到仓库&gt;12git commit -m "wrote a readme file"注：-m后面输入的是本次提交的说明 掌握工作区的状态121.使用git status命令查看仓库当前的状态2.使用git diff(或git diff HEAD -- file)可以查看工作区和版本库里最新版本的区别 版本回退123451.使用git log查看提交历史【注：git log --pretty=oneline(或git log --oneline)可减少信息显示】2.git reset --hard HEAD(当前版本),git reset --hard HEAD^(回退到上一个版本)【注：HEAD指向的版本就是当前版本,因此,可以使用命令git reset --hard commit_id在版本的历史之间穿梭;且往上100个版本可写成HEAD~100】3.使用git reflog查看命令历史 撤销修改123使用git checkout -- file丢弃工作区的修改使用git reset HEAD file可以把暂存区的修改撤销掉(unstage)，重新放回工作区【注：撤销修改前提是没有推送到远程库】 删除文件123使用rm file命令删除文件注意：1.确实要从版本库中删除该文件,用命令git rm file删掉,并且git commit 2.误删文件恢复到最新版本git checkout -- file 远程仓库创建SSH Key123$ ssh-keygen -t rsa -C "youremail@example.com（自己的邮箱地址）",接下来点击enter键即可（也可以输入密码）在Key文本框里粘贴id_rsa.pub文件的内容(注：在用户主目录下,存在.ssh目录,目录下存在id_rsa(私钥)和id_rsa.pub(公钥)这两个文件，跳过此步骤。如果不存在，打开Shell（Windows下打开Git Bash）,创建SSH Key) 添加远程仓库12使用命令git remote add origin git@server-name:path/repo-name.git关联一个远程库(注：origin是远程库的名字,git的默认叫法,可改) 12关联后,使用命令git push -u origin master第一次推送master分支的所有内容(注：由于远程库是空的,第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令,之后可直接使用git push origin master推送) 1234567891011 强制覆盖本地文件(如果远程库与本地文件重复) git fetch --all #下载远程的库的内容 git reset --hard origin/master #把HEAD指向刚刚下载的最新的版本 git pull origin master``` #### 修改远程仓库##### 通过命令直接修改远程地址```bash 使用命令git remote set-url origin git@server-name:path/repo-name.git 修改远程库 (注：origin是远程库的名字,git的默认叫法,可改) 通过命令先删除再添加远程仓库1231.git remote rm origin 删除远程仓库2.git remote add origin git@server-name:path/repo-name.git 添加远程仓库(注：origin是远程库的名字,git的默认叫法,可改) 直接修改配置文件1修改 [remote “origin”]下面的url即可 SSH警告12345第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.RSA key fingerprint is xx.xx.xx.xx.xx.Are you sure you want to continue connecting (yes/no)?这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。 123Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了Warning: Permanently added 'github.com' (RSA) to the list of known hosts.(注：这个警告只会出现一次，后面的操作就不会有任何警告了.) 从远程库克隆123使用git clone git@server-name:path/repo-name.git命令克隆使用git clone -b 分支名 git@server-name:path/repo-name.git命令克隆指定分支(注：Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议) 分支管理创建与合并分支1234567891011 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt;``` #### 解决冲突```bash 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 用git log --graph(git log --graph --pretty=oneline --abbrev-commit)命令可以看到分支合并图 分支管理策略(合并分支时Git会用Fast forward模式,这种模式下,删除分支后,会丢掉分支信息)12切换回master分支,并使用命令git merge --no-ff -m "merge with no-ff" &lt;name&gt;合并分支(准备合并分支时,强制禁用Fast forward模式,请使用--no-ff参数;因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去) Bug分支123使用命令git stash,可以把当前工作现场“储藏”起来,修复完bug后,再git stash pop,回到工作现场使用命令git stash list查看stash内容,恢复指定的stash,用命令git stash apply stash@&#123;0&#125;(注:用git stash apply恢复,stash内容并不删除,还需用git stash drop来删除;用git stash pop,恢复的同时把储藏的stash内容也删除) 123456789例:1.储藏当前工作现场(dev分支):git stash 2.切换到需要修复的bug(master)分支:git checkout master 3.从bug(master)分支创建临时分支(issue-101):git checkout -b issue-101 4.修复bug后,对修改内容进行commit提交后,切换回master分支:git checkout master 5.合并修复后的分支:git merge --no-ff -m "merged bug fix 101" issue-101 6.删除issue-101分支:git branch -d issue-101 7.切换回工作现场:git checkout dev 8.查看stash内容:git stash list 9.恢复stash内容:git stash pop(或者用命令git stash apply stash@&#123;0&#125;恢复指定stash,但要用git stash drop删除stash内容) Feature分支12丢弃一个没有被合并过的分支,通过git branch -D &lt;name&gt;强行删除(注:git branch -d &lt;name&gt;只能删除合并后的分支) 多人协作1查看远程库的信息用git remote -v(注:会显示可以抓取和推送的远程库地址,如果没有推送权限,就看不到push的地址) 1从本地推送分支,使用git push origin branch-name,如果推送失败,先用git pull抓取远程的新提交 1在本地创建和远程分支对应的分支,使用git checkout -b branch-name origin/branch-name,本地和远程分支的名称最好一致 1建立本地分支和远程分支的关联,使用git branch --set-upstream branch-name origin/branch-name 1234567 从远程抓取分支,使用git pull,如果有冲突,要先处理冲突``` ### 标签管理#### 创建标签```bash 命令git tag &lt;name&gt;用于新建一个标签,默认为HEAD,也可以指定一个commit id(git tag &lt;name&gt; commitId) 123创建带有说明的标签,用-a指定标签名,-m指定说明文字,-s用私钥签名一个标签指定标签信息:git tag -a &lt;tagname&gt; -m "blablabla..." commitId用私钥签名一个标签:git tag -s &lt;tagname&gt; -m "blablabla..." commitId 1命令git tag可以查看所有标签 1git show &lt;tagname&gt;查看标签信息 操作标签1推送一个本地标签:git push origin &lt;tagname&gt; 1推送全部未推送过的本地标签:git push origin --tags 1删除本地标签:git tag -d &lt;tagname&gt; 12删除一个远程标签:git push origin :refs/tags/&lt;tagname&gt;(注:删除远程标签要先删除本地标签) 配置别名1git config --global alias.别名 checkout 123456例: 配置git co,切换分支:git config --global alias.co checkout 配置git ci,提交说明:git config --global alias.ci commit 配置git br,显示分支信息:git config --global alias.br branch 配置git last,让其显示最后一次提交信息:git config --global alias.last 'log -1' 配置git lg:git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL中Binary Log二进制日志文件的基本操作命令小结]]></title>
    <url>%2F2017%2F02%2F22%2FMySQL%E4%B8%ADBinary%20Log%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言MySQL Binary Log也就是常说的bin-log,是mysql执行改动产生的二进制日志文件,其主要作用有两个: 数据恢复 主从数据库。用于slave端执行增删改，保持与master同步。 准备工作(开启binary log功能) 修改mysql的配置文件,添加一句log_bin = mysql_bin即可 二进制日志相关演示启用二进制日志当前环境123456789101112131415161718192021mysql&gt; show variables like '%version%'; +-------------------------+------------------------------+| Variable_name | Value |+-------------------------+------------------------------+| innodb_version | 5.5.53 || protocol_version | 10 || slave_type_conversions | || version | 5.5.53-log || version_comment | MySQL Community Server (GPL) || version_compile_machine | AMD64 || version_compile_os | Win32 |+-------------------------+------------------------------+mysql&gt; show variables like '%log_bin%';+---------------------------------+-------+| Variable_name | Value |+---------------------------------+-------+| log_bin | ON | --该参数用于设定是否启用二进制日志| log_bin_trust_function_creators | OFF || sql_log_bin | ON |+---------------------------------+-------+ 以下为binary log相关参数1234567891011121314mysql&gt; show variables like '%binlog%';+-----------------------------------------+----------------------+| Variable_name | Value |+-----------------------------------------+----------------------+| binlog_cache_size | 32768 || binlog_direct_non_transactional_updates | OFF || binlog_format | STATEMENT || binlog_stmt_cache_size | 32768 || innodb_locks_unsafe_for_binlog | OFF || max_binlog_cache_size | 18446744073709547520 || max_binlog_size | 1073741824 || max_binlog_stmt_cache_size | 18446744073709547520 || sync_binlog | 0 |+-----------------------------------------+----------------------+ 当前mysql服务器数据文件的缺省位置123456mysql&gt; show variables like '%datadir%'; +---------------+-------------------------+| Variable_name | Value |+---------------+-------------------------+| datadir | D:\phpStudy\MySQL\data\ |+---------------+-------------------------+ 使用命令行工具mysqlbinlog直接提取二进制日志的内容查看产生的binary log123456789mysql&gt; show binary logs; +------------------+-----------+ | Log_name | File_size | +------------------+-----------+ | mysql_bin.000001 | 147 | | mysql_bin.000002 | 147 | | mysql_bin.000003 | 147 | | mysql_bin.000004 | 498 | +------------------+-----------+ 利用bin_log恢复数据12#最常用的就是恢复指定数据端的数据了，可以直接恢复到数据库中mysqlbinlog --start-date="2012-10-15 16:30:00" --stop-date="2012-10-15 17:00:00" mysql_bin.000001 |mysql -uroot -p123456 12#亦可导出为sql文件，再导入至数据库中：mysqlbinlog --start-date="2012-10-15 16:30:00" --stop-date="2012-10-15 17:00:00" mysql_bin.000001 &gt; d:\000001.sql 123#指定开始\结束位置，从上面的查看产生的binary log我们可以知道某个log的开始到结束的位置，我们可以在恢复的过程中指定回复从A位置到B位置的log.需要用下面两个参数来指定： --start-positon="50" //指定从50位置开始 --stop-postion="100"//指定到100位置结束 bin_log的操作查看最后一个bin日志文件是那个,现在位置123456mysql&gt; show master status;+------------------+----------+--------------+------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+------------------+| mysql_bin.000025 | 686 | | |+------------------+----------+--------------+------------------+ 启用新的日志文件,一般备份完数据库后执行123456789mysql&gt; flush logs;Query OK, 0 rows affectedmysql&gt; show master status;+------------------+----------+--------------+------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+------------------+| mysql_bin.000026 | 107 | | |+------------------+----------+--------------+------------------+ 清空现有的所用bin-log12345678910111213141516mysql&gt; show master status;+------------------+----------+--------------+------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+------------------+| mysql_bin.000026 | 107 | | |+------------------+----------+--------------+------------------+mysql&gt; reset master;Query OK, 0 rows affectedmysql&gt; show master status;+------------------+----------+--------------+------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+------------------+| mysql_bin.000001 | 107 | | |+------------------+----------+--------------+------------------+ 注意事项MySQL mysqlbinlog 查看binlog时报错unknown variable ‘default-character-set=utf8’解决1.问题描述1mysqlbinlog: unknown variable 'default-character-set=utf8' 2.原因1mysqlbinlog这个工具无法识别binlog中的配置中的default-character-set=utf8这个指令 3.解决方法1.修改配置文件 —永久生效123456windows环境下的my.ini或linux环境下的/etc/my.cnf[client]#设置MySQL客户端的字符集default-character-set=utf8把client下的default-character-set=utf8修改成character-set-server = utf8然后重启生效 2.无需重启环境12使用--no-defaultsmysqlbinlog --no-defaults mysql-bin.000001]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Yii2 RESTful API开发]]></title>
    <url>%2F2016%2F10%2F01%2FYii2%20RESTful%20API%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[前言Yii 是一个适用于开发 Web2.0 应用程序的高性能 PHP 框架，帮助Web开发人员建立复杂的应用程序，可以减少开发时间 准备工作 安装 Composer管理依赖关系工具 1234567安装完Composer，修改 composer 的全局配置文件(使用中国镜像)composer config -g repo.packagist composer https://packagist.phpcomposer.com运行下面的命令来安装Composer Asset插件:composer global require "fxp/composer-asset-plugin:^1.2.0" 安装Yii2.0通过 Composer 安装12安装最新的高级的应用程序模板(命名为advanced目录):composer create-project yiisoft/yii2-app-advanced advanced 从归档文件安装 先去Yii官网下载一份Yii的高级模版 配置环境变量12345678910111. 把php.exe加入系统环境变量2. 右击我的电脑-属性-高级-环境变量3. 找到 Path 这一项（可能需要向下滚动才能找到），鼠标双击 Path 这一项，在最后加入你的 PHP 目录和类库所在的路径，包括前面的“;”（例如 ：D:\phpStudy\php\php-5.6.27-nts）4. 点击“新建”按钮并在“变量名”中输入“PHPRC”，在“变量值”中输入 php.ini 文件所在的目录（例如：D:\phpStudy\php\php-5.6.27-nts） ,这个步骤是为了让windows找到php.ini5. 运行CMD 进入安装目录中，执行init或在安装目录中运行init.bat，选择 0 开发模式进行安装【注：yii2执行init提示openssl问题，php没加载openssl.dll，在php配置文件里，将默认的注释去掉。】 新建数据库 advanced，然后新建 user 用户表123456789101112131415CREATE TABLE `user` (`id` int(11) NOT NULL AUTO_INCREMENT COMMENT "自增ID", `username` varchar(255) NOT NULL COMMENT "用户名", `auth_key` varchar(32) NOT NULL COMMENT "自动登录key", `password_hash` varchar(255) NOT NULL COMMENT "加密密码", `password_reset_token` varchar(255) DEFAULT NULL COMMENT "重置密码token", `email` varchar(255) NOT NULL COMMENT "邮箱", `role` smallint(6) NOT NULL DEFAULT "10" COMMENT "角色等级", `status` smallint(6) NOT NULL DEFAULT "10" COMMENT "状态", `created_at` int(11) NOT NULL COMMENT "创建时间", `updated_at` int(11) NOT NULL COMMENT "更新时间", PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8 COMMENT="用户表";配置数据库文件 advanced/common/main-local.php，输入数据库账号和密码 目录结构 将文件放到web可访问目录，文件名advanced，打开得到如下图所示的目录 123目录结构的介绍就不在这里详细说明了，我们主要认识的是三个目录 ==backend==（后台）、==common==(公用)、 ==frontend==（前台）。【注:通过composer安装倘若目录结构没有vendor核心文件,进入目录文件使用composer update 命令更新核心文件】 演示 打开浏览器访问http://localhost/advanced/frontend/web/就能看到前台界面了，http://localhost/advanced/backend/web/是后台界面（出现一个登陆界面） 安装 AdminLTE 渲染后台利用 AdminLTE 渲染后台模板 [x] 进入 cmd，切换到 advanced 目录，输入 123composer require dmstr/yii2-adminlte-asset "2.*"注:phpstorm集成开发工具按快捷键Ctrl + Shift + X 运行命令行 [x] 安装过程如提示输入 Token,解决办法为进入github,设置个人令牌 1点击 「Generate new token」 新建一个 Token，选择默认新建就行，然后就会得到一个 Token，然后输入这个值就 OK 了。 [x] 输入Token报如下错误 12345Installation failed, reverting ./composer.json to its original content. [Composer\Repository\InvalidRepositoryException] No valid bower.json was found in any branch or tag of https://github.com/DmitryBaranovskiy/eve.git, could not load a package from it. [x] 解决办法为直接编辑advanced文件夹composer.json文件,然后添加github的授权,将 123456789101112"config": &#123; "process-timeout": 1800 &#125;,改为"config": &#123; "process-timeout": 1800, "github-oauth": &#123; "github.com": "此处输入您的github授权码" &#125; &#125;, url 美化 [x] 配置：backend/config/main.php 文件的 compontents 1234"urlManager" =&gt; [ "enablePrettyUrl" =&gt; true,//用于表明 urlManager 是否启用URL美化功能 "showScriptName" =&gt; false,// 是否在URL中显示入口脚本], [x] 下载 .htaccess 文件，放在 backend/web 目录下（这是为了隐藏 Index.php，apache必须要开启rewrite模块） 安装 yii2-admin 集成 rbac [x] 进入 cmd，切换到 advanced 目录，输入 1composer require mdmsoft/yii2-admin "2.x-dev" [x] 配置 backend/config/main.php 文件 1234567891011121314151617181920212223"modules" =&gt; [ "admin" =&gt; [ "class" =&gt; "mdm\admin\Module", ],],"aliases" =&gt; [ "@mdm/admin" =&gt; "@vendor/mdmsoft/yii2-admin",],'as access' =&gt; [ 'class' =&gt; 'mdm\admin\components\AccessControl', 'allowActions' =&gt; [ //这里是允许访问的action //controller/action // * 表示允许所有，后期会介绍这个 '*' ]],'components' =&gt; [ "authManager" =&gt; [ "class" =&gt; 'yii\rbac\DbManager', "defaultRoles" =&gt; ["guest"], ],], [x] 导入 rbac 表格 1执行.sql 文件：vendor/yiisoft/yii2/rbac/migrations/schema-mysql.sql]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yii2安装教程]]></title>
    <url>%2F2016%2F10%2F01%2Fyii2%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言Yii 是一个适用于开发 Web2.0 应用程序的高性能 PHP 框架，帮助Web开发人员建立复杂的应用程序，可以减少开发时间 准备工作 先去Yii官网(http://www.yiiframework.com/download/)下载一份Yii的高级模版 将下载下来的文件解压放到web可访问目录，文件名advanced，打开得到如下图所示的目录 目录结构的介绍就不在这里详细说明了，我们主要认识的是三个目录 ==backend==（后台）、==common==(公用)、 ==frontend==（前台）。 配置环境变量12345678910111. 把php.exe加入系统环境变量2. 右击我的电脑-属性-高级-环境变量3. 找到 Path 这一项（可能需要向下滚动才能找到），鼠标双击 Path 这一项，在最后加入你的 PHP 目录和类库所在的路径，包括前面的“;”（例如 ：D:\phpStudy\php\php-5.6.27-nts）4. 点击“新建”按钮并在“变量名”中输入“PHPRC”，在“变量值”中输入 php.ini 文件所在的目录（例如：D:\phpStudy\php\php-5.6.27-nts） ,这个步骤是为了让windows找到php.ini5. 运行CMD 进入安装目录中，执行init或在安装目录中运行init.bat，选择 0 开发模式进行安装【注意：yii2执行init提示openssl问题，php没加载openssl.dll，在php配置文件里，将默认的注释去掉。】 演示 打开浏览器访问http://localhost/advanced/frontend/web/就能看到前台界面了，http://localhost/advanced/backend/web/是后台界面（出现一个登陆界面）]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Liunx随笔]]></title>
    <url>%2F2016%2F08%2F10%2FLiunx%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[网站根目录权限遵循12345文件 644， 文件夹 755 ，权限用户和用户组www 如出现文件权限问题时，请执行下面 3 条命令：chown -R www.www /data/wwwroot/find /data/wwwroot/ -type d -exec chmod 755 &#123;&#125; \;find /data/wwwroot/ -type f -exec chmod 644 &#123;&#125; \;]]></content>
      <categories>
        <category>Liunx</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO搭建个人博客(笔记)]]></title>
    <url>%2F2016%2F05%2F20%2FHEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言博客对每个人的作用不一样,有的是为了对自我成长的一个记录,有的是为了将其当做展示自我平台,不管怎么说,通过这个平台,可以结交很多的博友,并在博友之间提高自己的影响力！ hexo常用的命令,#后面为注释123456789$ 'hexo g' #完整命令为hexo generate，用于生成静态文件$ 'hexo s' #完整命令为hexo server，用于启动服务器，主要用来本地预览$ 'hexo d' #完整命令为hexo deploy，用于将本地文件发布到github上$ 'hexo n' #完整命令为hexo new，用于新建一篇文章$ 'hexo new "postName"' #新建文章$ 'hexo new page "pageName"' #新建页面$ 'hexo generate' #生成静态页面至public目录$ 'hexo help' #查看帮助$ 'hexo version' #查看Hexo的版本 配置环境 安装Node:前往Node.js[官网]下载最新版本(https://nodejs.org/en/)安装 安装Git:前往git Download下载(安装教程配置等请自行百度) 申请GitHub账号 操作步骤安装HEXO12$ sudo npm install -g hexo #(ubuntu系统)$ npm install -g hexo-cli #(windows系统) 初始化(创建一个文件夹，如：Blog,cd到Blog里执行hexo init命令)1$ hexo init 文章创建步骤生成静态页面(继续再Blog目录下执行如下命令，生成静态页面)1$ hexo generate 本地启动(启动本地服务，进行文章预览调试，命令)1$ hexo server 手动配置123$ npm install hexo-renderer-ejs --save$ npm install hexo-renderer-stylus --save$ npm install hexo-renderer-marked --save github需要修改配置文件_config.yml1234deploy: type: git #类型 repository: git@github.com:######/######.git #ssh路径 branch: gh-pages #分支 使用git部署命令1npm install hexo-deployer-git --save 部署步骤(更新文章等操作每次以以下步骤进行)1234567$ hexo clean$ hexo generate$ hexo deploy#或使用复合命令$ hexo deploy -g $ hexo server -g]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
