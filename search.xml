<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[更改Ubuntu默认python版本的两种方法]]></title>
    <url>%2F2017%2F07%2F25%2F%E6%9B%B4%E6%94%B9Ubuntu%E9%BB%98%E8%AE%A4python%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[使用 ls 命令来查看系统中都有那些 Python 的二进制文件可供使用1'ls /usr/bin/python*' 查看默认的 Python 版本信息1'python --version' 在系统级修改 Python 版本 使用 update-alternatives 来为整个系统更改 Python 版本。以 root 身份登录，首先罗列出所有可用的 python 替代版本信息1'update-alternatives --list python' 将 python2.7 和 python3.5 放入其中123'update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1''update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2'#【--install 选项使用了多个参数用于创建符号链接。最后一个参数指定了此选项的优先级，如果我们没有手动来设置替代选项，那么具有最高优先级的选项就会被选中】 列出可用的 Python 替代版本1'update-alternatives --list python' 使用下方的命令随时在列出的 Python 替代版本中任意切换1'update-alternatives --config python' 移除替代版本1'update-alternatives --remove python /usr/bin/python2.7']]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git学习笔记]]></title>
    <url>%2F2017%2F07%2F21%2Fgit%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[在Windows上安装Git 前往git Download下载 安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，在命令行输入: 12$ git config --global user.name &quot;your name&quot;$ git config --global user.email &quot;email@example.com&quot; 创建版本库123$ mkdir sugar$ cd sugar$ pwd(用于显示当前目录) 通过git init 命令把目录变成Git可以管理的仓库1$ git init 把文件添加到版本库 1.编写文件(vi readme.txt)12Git is a version control system.Git is free software. 2.用命令git add 将文件添加到仓库12git add readme.txt注：git add &lt;file&gt; &lt;file&gt;可反复多次使用，添加多个文件 3.用命令git commit 将文件提交到仓库12git commit -m "wrote a readme file"注：-m后面输入的是本次提交的说明 掌握工作区的状态12345678910 1.使用git status命令查看仓库当前的状态 2.使用git diff(或git diff HEAD -- file)可以查看工作区和版本库里最新版本的区别```bash版本回退```bash 1.使用git log查看提交历史 【注：git log --pretty=oneline(或git log --oneline)可减少信息显示】 2.git reset --hard HEAD(当前版本),git reset --hard HEAD^(回退到上一个版本) 【注：HEAD指向的版本就是当前版本,因此,可以使用命令git reset --hard commit_id在版本的历史之间穿梭;且往上100个版本可写成HEAD~100】 3.使用git reflog查看命令历史 撤销修改123使用git checkout -- file丢弃工作区的修改使用git reset HEAD file可以把暂存区的修改撤销掉(unstage)，重新放回工作区【注：撤销修改前提是没有推送到远程库】 删除文件123使用rm file命令删除文件注意：1.确实要从版本库中删除该文件,用命令git rm file删掉,并且git commit 2.误删文件恢复到最新版本git checkout -- file 远程仓库 1.创建SSH Key123$ ssh-keygen -t rsa -C "youremail@example.com（自己的邮箱地址）",接下来点击enter键即可（也可以输入密码）在Key文本框里粘贴id_rsa.pub文件的内容(注：在用户主目录下,存在.ssh目录,目录下存在id_rsa(私钥)和id_rsa.pub(公钥)这两个文件，跳过此步骤。如果不存在，打开Shell（Windows下打开Git Bash）,创建SSH Key) 2.添加远程仓库12使用命令git remote add origin git@server-name:path/repo-name.git关联一个远程库(注：origin是远程库的名字,git的默认叫法,可改) 12关联后,使用命令git push -u origin master第一次推送master分支的所有内容(注：由于远程库是空的,第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令,之后可直接使用git push origin master推送) 123456789101112 强制覆盖本地文件(如果远程库与本地文件重复) git fetch --all #下载远程的库的内容 git reset --hard origin/master #把HEAD指向刚刚下载的最新的版本 git pull origin master``` ### 3.SSH警告```bash 第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告 The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established. RSA key fingerprint is xx.xx.xx.xx.xx. Are you sure you want to continue connecting (yes/no)? 这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。 123Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了Warning: Permanently added 'github.com' (RSA) to the list of known hosts.(注：这个警告只会出现一次，后面的操作就不会有任何警告了.) 4.从远程库克隆12使用git clone git@server-name:path/repo-name.git命令克隆(注：Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议) 分支管理 1.创建与合并分支1234567891011 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt;``` ### 2.解决冲突```bash 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 用git log --graph(git log --graph --pretty=oneline --abbrev-commit)命令可以看到分支合并图 3.分支管理策略(合并分支时Git会用Fast forward模式,这种模式下,删除分支后,会丢掉分支信息)12切换回master分支,并使用命令git merge --no-ff -m "merge with no-ff" &lt;name&gt;合并分支(准备合并分支时,强制禁用Fast forward模式,请使用--no-ff参数;因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去) 4.Bug分支123使用命令git stash,可以把当前工作现场“储藏”起来,修复完bug后,再git stash pop,回到工作现场使用命令git stash list查看stash内容,恢复指定的stash,用命令git stash apply stash@&#123;0&#125;(注:用git stash apply恢复,stash内容并不删除,还需用git stash drop来删除;用git stash pop,恢复的同时把储藏的stash内容也删除) 123456789例:1.储藏当前工作现场(dev分支):git stash 2.切换到需要修复的bug(master)分支:git checkout master 3.从bug(master)分支创建临时分支(issue-101):git checkout -b issue-101 4.修复bug后,对修改内容进行commit提交后,切换回master分支:git checkout master 5.合并修复后的分支:git merge --no-ff -m "merged bug fix 101" issue-101 6.删除issue-101分支:git branch -d issue-101 7.切换回工作现场:git checkout dev 8.查看stash内容:git stash list 9.恢复stash内容:git stash pop(或者用命令git stash apply stash@&#123;0&#125;恢复指定stash,但要用git stash drop删除stash内容) 5.Feature分支12丢弃一个没有被合并过的分支,通过git branch -D &lt;name&gt;强行删除(注:git branch -d &lt;name&gt;只能删除合并后的分支) 6.多人协作1查看远程库的信息用git remote -v(注:会显示可以抓取和推送的远程库地址,如果没有推送权限,就看不到push的地址) 1从本地推送分支,使用git push origin branch-name,如果推送失败,先用git pull抓取远程的新提交 1在本地创建和远程分支对应的分支,使用git checkout -b branch-name origin/branch-name,本地和远程分支的名称最好一致 1建立本地分支和远程分支的关联,使用git branch --set-upstream branch-name origin/branch-name 1234567 从远程抓取分支,使用git pull,如果有冲突,要先处理冲突``` 标签管理### 1.创建标签```bash 命令git tag &lt;name&gt;用于新建一个标签,默认为HEAD,也可以指定一个commit id(git tag &lt;name&gt; commitId) 123创建带有说明的标签,用-a指定标签名,-m指定说明文字,-s用私钥签名一个标签指定标签信息:git tag -a &lt;tagname&gt; -m "blablabla..." commitId用私钥签名一个标签:git tag -s &lt;tagname&gt; -m "blablabla..." commitId 1命令git tag可以查看所有标签 1git show &lt;tagname&gt;查看标签信息 2.操作标签1推送一个本地标签:git push origin &lt;tagname&gt; 1推送全部未推送过的本地标签:git push origin --tags 1删除本地标签:git tag -d &lt;tagname&gt; 12删除一个远程标签:git push origin :refs/tags/&lt;tagname&gt;(注:删除远程标签要先删除本地标签) 配置别名1git config --global alias.别名 checkout 123456例: 配置git co,切换分支:git config --global alias.co checkout 配置git ci,提交说明:git config --global alias.ci commit 配置git br,显示分支信息:git config --global alias.br branch 配置git last,让其显示最后一次提交信息:git config --global alias.last 'log -1' 配置git lg:git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit" 网站根目录权限遵循：12345文件 644， 文件夹 755 ，权限用户和用户组www 如出现文件权限问题时，请执行下面 3 条命令：chown -R www.www /data/wwwroot/find /data/wwwroot/ -type d -exec chmod 755 &#123;&#125; \;find /data/wwwroot/ -type f -exec chmod 644 &#123;&#125; \;]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO搭建个人博客(笔记)]]></title>
    <url>%2F2015%2F05%2F20%2FHEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言博客对每个人的作用不一样,有的是为了对自我成长的一个记录,有的是为了将其当做展示自我平台,不管怎么说,通过这个平台,可以结交很多的博友,并在博友之间提高自己的影响力！ hexo常用的命令,#后面为注释123456789$ 'hexo g' #完整命令为hexo generate，用于生成静态文件$ 'hexo s' #完整命令为hexo server，用于启动服务器，主要用来本地预览$ 'hexo d' #完整命令为hexo deploy，用于将本地文件发布到github上$ 'hexo n' #完整命令为hexo new，用于新建一篇文章$ 'hexo new "postName"' #新建文章$ 'hexo new page "pageName"' #新建页面$ 'hexo generate' #生成静态页面至public目录$ 'hexo help' #查看帮助$ 'hexo version' #查看Hexo的版本 配置环境 安装Node:前往Node.js[官网]下载最新版本(https://nodejs.org/en/)安装 安装Git:前往git Download下载(安装教程配置等请自行百度) 申请GitHub账号 操作步骤安装HEXO12$ sudo npm install -g hexo #(ubuntu系统)$ npm install -g hexo #(windows系统) 初始化(创建一个文件夹，如：Blog,cd到Blog里执行hexo init命令)1$ hexo init 文章创建步骤生成静态页面(继续再Blog目录下执行如下命令，生成静态页面)1$ hexo generate 本地启动(启动本地服务，进行文章预览调试，命令)1$ hexo server 手动配置123$ npm install hexo-renderer-ejs --save$ npm install hexo-renderer-stylus --save$ npm install hexo-renderer-marked --save github需要修改配置文件_config.yml1234deploy: type: git #类型 repository: git@github.com:######/######.git #ssh路径 branch: gh-pages #分支 使用git部署命令1npm install hexo-deployer-git --save 部署步骤(更新文章等操作每次以以下步骤进行)123$ hexo clean$ hexo generate$ hexo deploy]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
